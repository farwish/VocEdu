<?php

namespace App\Exceptions;

use App\Http\Controllers\Controller;
use Illuminate\Auth\Access\AuthorizationException;
use Illuminate\Auth\AuthenticationException;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Illuminate\Database\QueryException;
use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Illuminate\Http\Exceptions\ThrottleRequestsException;
use Illuminate\Http\Request;
use Illuminate\Support\Str;
use Illuminate\Validation\ValidationException;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Throwable;

class Handler extends ExceptionHandler
{
    /**
     * A list of the exception types that are not reported.
     *
     * @var array
     */
    protected $dontReport = [
        //
    ];

    /**
     * A list of the inputs that are never flashed for validation exceptions.
     *
     * @var array
     */
    protected $dontFlash = [
        'password',
        'password_confirmation',
    ];

    /**
     * Register the exception handling callbacks for the application.
     *
     * @return void
     */
    public function register()
    {
        //
    }

    public function render($request, Throwable $e)
    {
        if (! $this->isNova($request)) {
            // Middleware auth:api was not authenticated
            if ($e instanceof AuthenticationException) {
                return $this->failure('身份认证失败', 401);
            }

            // Middleware can:xx was not authorized
            if ($e instanceof AuthorizationException) {
                return $this->failure('当前操作未授权', 403);
            }

            // Validation error
            if ($e instanceof ValidationException) {
                $array = $e->errors();

                // $messages = '';
                // foreach ($array as $column => $items) {
                //     foreach ($items as $idx => $message) {
                //         $messages .= "{$message}";
                //     }
                // }

                // Now only show one error message
                $message = current(current($array));
                return $this->failure($message);
            }

            if ($e instanceof QueryException) {
                // Duplicate entry
                if ($e->errorInfo && $e->errorInfo[1] == 1062) {
                    return $this->failure('数据已存在，请不要重复创建');
                } else {
                    if (config('app.env') == 'local') {
                        return $this->failure($e->getMessage());
                    } else {
                        return $this->failure('数据服务异常, 请联系我们~');
                    }
                }
            }

            // In normal is some route not exists
            if ($e instanceof NotFoundHttpException) {
                return $this->failure('资源不存在', 404);
            }

            // FirstOrFail raised
            if ($e instanceof ModelNotFoundException) {
                return $this->failure('资源未找到', 404);
            }

            // Too Many Attempts, file to see $e->getFile()
            if ($e instanceof ThrottleRequestsException) {
                return $this->failure('操作过于频繁, 稍后再试', 429);
            }

            // Finally, if the exception is unknown, local env can just throw it out.
            if (config('app.env') == 'local') {
                return $this->failure($e->getMessage());
            }

            // Return json instead of the default redirect render
            return $this->failure('系统异常');
        } else {
            return parent::render($request, $e); // TODO: Change the autogenerated stub
        }
    }

    // Check is admin panel
    public function isNova(Request $request)
    {
        if (Str::startsWith($request->getPathInfo(), config('nova.path'))) {
            return true;
        }
        return false;
    }

    // Just a wrapper
    public function failure($message, $status = 200)
    {
        return app(Controller::class)->failure($message, $status);
    }
}
